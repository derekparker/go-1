diff --git a/src/crypto/internal/backend/openssl.go b/src/crypto/internal/backend/openssl.go
index 0e9fec07b7..07d7692277 100644
--- a/src/crypto/internal/backend/openssl.go
+++ b/src/crypto/internal/backend/openssl.go
@@ -12,9 +12,11 @@ package backend
 
 import (
 	"crypto/internal/boring/sig"
-	"github.com/golang-fips/openssl/v2"
+	"fmt"
 	"os"
 	"syscall"
+
+	"github.com/golang-fips/openssl/v2"
 )
 
 // Enabled controls whether FIPS crypto is enabled.
@@ -27,13 +29,14 @@ func init() {
 	if version == "" {
 		var fallbackVersion string
 		for _, v := range knownVersions {
-			exists, fips := openssl.CheckVersion(v)
+			vv := fmt.Sprintf("libcrypto.so.%s", v)
+			exists, fips := openssl.CheckVersion(vv)
 			if exists && fips {
-				version = v
+				version = vv
 				break
 			}
 			if exists && fallbackVersion == "" {
-				fallbackVersion = v
+				fallbackVersion = vv
 			}
 		}
 		if version == "" && fallbackVersion != "" {
diff --git a/src/crypto/tls/boring_test.go b/src/crypto/tls/boring_test.go
index e7ae7fc5ca..01d3c35f35 100644
--- a/src/crypto/tls/boring_test.go
+++ b/src/crypto/tls/boring_test.go
@@ -7,6 +7,7 @@
 package tls
 
 import (
+	"crypto"
 	"crypto/ecdsa"
 	"crypto/elliptic"
 	boring "crypto/internal/backend"
@@ -216,7 +217,10 @@ func TestBoringServerSignatureAndHash(t *testing.T) {
 
 			testingOnlyForceClientHelloSignatureAlgorithms = []SignatureScheme{sigHash}
 
-			sigType, _, _ := typeAndHashFromSignatureScheme(sigHash)
+			sigType, hashFunc, _ := typeAndHashFromSignatureScheme(sigHash)
+			if hashFunc == crypto.SHA1 && !boringtest.Supports(t, "SHA1") {
+				t.Skip("unsupported in FIPS mode")
+			}
 			switch sigType {
 			case signaturePKCS1v15, signatureRSAPSS:
 				serverConfig.CipherSuites = []uint16{TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256}
@@ -329,7 +333,7 @@ func TestBoringCertAlgs(t *testing.T) {
 	// Set up some roots, intermediate CAs, and leaf certs with various algorithms.
 	// X_Y is X signed by Y.
 	R1 := boringCert(t, "R1", boringRSAKey(t, 2048), nil, boringCertCA|boringCertFIPSOK)
-	R2 := boringCert(t, "R2", NotBoringRSAKey(t, 512), nil, boringCertCA)
+	R2 := boringCert(t, "R2", NotBoringRSAKey(t, 2560), nil, boringCertCA)
 
 	M1_R1 := boringCert(t, "M1_R1", boringECDSAKey(t, elliptic.P256()), R1, boringCertCA|boringCertFIPSOK)
 
diff --git a/src/crypto/x509/boring_test.go b/src/crypto/x509/boring_test.go
index 88b69937be..38790b33af 100644
--- a/src/crypto/x509/boring_test.go
+++ b/src/crypto/x509/boring_test.go
@@ -63,7 +63,7 @@ type boringCertificate struct {
 
 func TestBoringAllowCert(t *testing.T) {
 	R1 := testBoringCert(t, "R1", boringRSAKey(t, 2048), nil, boringCertCA|boringCertFIPSOK)
-	R2 := testBoringCert(t, "R2", notBoringRSAKey(t, 512), nil, boringCertCA)
+	R2 := testBoringCert(t, "R2", notBoringRSAKey(t, 2560), nil, boringCertCA)
 	R3 := testBoringCert(t, "R3", boringRSAKey(t, 4096), nil, boringCertCA|boringCertFIPSOK)
 
 	M1_R1 := testBoringCert(t, "M1_R1", boringECDSAKey(t, elliptic.P256()), R1, boringCertCA|boringCertFIPSOK)
